#!/usr/bin/env python
import os

import click
from tabulate import tabulate

from covid_data_miner.src.context_manager import ContextManager
from covid_data_miner.src.main import sources_factory


context = ContextManager()
userpath = os.path.expanduser("~")


@click.group(name='covid19')
@click.option('--conf', '-c', default=f'{userpath}/.covid19/config.json')
def main(conf):
    context.load_config_file(conf)


@main.group()
def sources():
    pass


@main.group()
def plugins():
    pass


@main.group()
def settings():
    pass


@sources.command()
def ls():
    sources = sources_factory.list_sources()
    enabled = context.get_enabled_sources_names()
    table = [
        [s['name'], ', '.join(s['tags']), 'on' if s['name'] in enabled else 'off', '-'] for s in sources
    ]
    click.echo('\n' + tabulate(table, headers=["name", "tags", "status", "last_update"]) + '\n')


@sources.command()
@click.argument('name')
def enable(name):
    enabled = context.get_enabled_sources_names()
    if name in enabled:
        click.echo(f'source "{name}" already enabled')
        exit(1)
    sources = sources_factory.list_sources()
    names = [s['name'] for s in sources]
    if name not in names:
        click.echo(f'source "{name}" does not exist')
        exit(1)
    context.enable_source(name)
    click.echo(f'source "{name}" enabled')
    exit()


@sources.group()
@click.argument('name')
def disable(name):
    enabled = context.get_enabled_sources_names()
    if name not in enabled:
        click.echo(f'source "{name}" not enabled')
        exit(1)
    sources = sources_factory.list_sources()
    names = [s['name'] for s in sources]
    if name not in names:
        click.echo(f'source "{name}" does not exist')
        exit(1)
    context.disable_source(name)
    click.echo(f'source "{name}" disabled')
    exit()


@settings.command()
@click.argument('github_api_key')
def set_github_api_key(github_api_key):
    context.set_github_api_key(github_api_key)
    click.echo('\nGithub API key deleted\n') if not github_api_key else click.echo('\nGithub API key saved\n')


@settings.command()
@click.argument('hostname')
@click.argument('port')
def set_influxdb_endpoint(hostname, port):
    context.set_influxdb_endpoint(hostname, int(port))
    click.echo(f'\nInfluxdb endpoint set, host: {hostname}, port: {port}\n')


if __name__ == '__main__':
    main()
